################ VERSION #################
# Version: Clang-Format 17
# If you use a different version, you might get error syntax
# Document for Clang-Format 17 (stable and latest): https://releases.llvm.org/17.0.1/tools/clang/docs/ClangFormatStyleOptions.html

################ INSTALLATION #################
##### With Apt #####
# How to download and install Clang-Format 17 in Ubuntu (below steps also work for other versions):
#   $ wget https://apt.llvm.org/llvm.sh
#   $ chmod +x llvm.sh
#   $ sudo ./llvm.sh 17
#   $ sudo apt install clang-format-17
#   $ rm -r llvm.sh; rm llvm.sh.1
# NOTE: By default, if you ignore above steps and just run "sudo apt install clang-format", then only Clang-Format 10 is installed.

##### With Homebrew #####
#   $ brew install llvm           # Same as $ brew install llvm@17

############### ON/OFF #################
DisableFormat: false                                    # Whether to disable formatting completely


############### GENERAL #################
BasedOnStyle: LLVM                                      # Choose a default formatting style. NOTE: Below, as we define all styles ourselves, this option becomes useless
Language: Cpp                                           # Choose a language that our format styles are targeted at
Standard: Latest                                        # Parse and format C++ constructs compatible with this standard
LineEnding: LF                                          # [Since Clang-Format 16] Line ending style (\n or \r\n)
# DeriveLineEnding: false                               # Whether to analyze the formatted file for line ending (\r\n or \n). UseCRLF is only used as a fallback if none can be derived. NOTE: This option is DEPRECATED. Use LineEnding instead.
# UseCRLF: false                                        # Whether to use \r\n instead of \n for line breaks. Also used as fallback if DeriveLineEnding is true. NOTE: This option is DEPRECATED. Use LineEnding instead.

############### LINE BREAK #################
BreakBeforeBraces: Attach                               # Brace brackets ({}) breaking style

AllowShortBlocksOnASingleLine: Never                    # Whether to allow "while (true) {continue;}" on a single line. If it's set to "Never" and code was broken into multiple lines before, keep it as it is
AllowShortCaseLabelsOnASingleLine: false                # Whether to allow case labels in switch-case statements on a single line. If it's set to "false" and code was broken into multiple lines before, keep it as it is
AllowShortEnumsOnASingleLine: false                     # Whether to allow short enums on a single line. If it's set to "false" and code was broken into multiple lines before, keep it as it is
AllowShortFunctionsOnASingleLine: Empty                 # Whether to allow "int f() {}" or "int f() {return 0;}" on a single line. If it's set to "None" and code was broken into multiple lines before, keep it as it is
AllowShortLambdasOnASingleLine: None                    # Whether to allow "auto lambda []() {return 0;}" on a single line. If it's set to "None" and code was broken into multiple lines before, keep it as it is
AllowShortIfStatementsOnASingleLine: Never              # Whether to allow "if (a) return;" on a single line. If it's set to "Never" and code was broken into multiple lines before, keep it as it is
AllowShortLoopsOnASingleLine: false                     # Whether to allow "true, while (true) continue;" on a single line. If it's set to "false" and code was broken into multiple lines before, keep it as it is

AlwaysBreakAfterReturnType: None                        # Whether to break return type in function declaration (e.g., "int \nfunc() {...}"). If it's set to "None" and return type was broken before, keep it as it is
AlwaysBreakTemplateDeclarations: No                     # Whether to break template statement in declaration breaking (e.g., "template <typename T> \nT foo() {...}"). If set to "No", and template statement was broken before, keep it as it is
AlwaysBreakBeforeMultilineStrings: false                # Whether to break before multiline string literals. If it's set to "false" and string was broken into multiple lines before, keep it as it is

BinPackArguments: true                                  # Whether to allow arguments of function calls on a single line (e.g., "func(a, b, c, d);"). If set to "false", and arguments are broken into multiple lines before, keep them as they are
BinPackParameters: true                                 # Whether to allow parameters of function declarations/definitions on a single line (e.g., "void func(int a, char b);"). If set to "false", and parameters are broken into multiple lines before, keep them as they are

AllowAllArgumentsOnNextLine: false                      # Whether to break each argument of function calls or braced initializers onto the next line if they doesn’t fit on a line, even if BinPackArguments = false
AllowAllParametersOfDeclarationOnNextLine: false        # Whether to break each argument of function declarations onto the next line if they doesn’t fit on a line, even if BinPackArguments = false
# AllowAllConstructorInitializersOnNextLine: false      # Whether to break each constructor initializer onto the next line if they doesn’t fit on a line. NOTE: This option is DEPRECATED since Clang-Format 14. Use PackConstructorInitializers instead.

BreakBeforeBinaryOperators: NonAssignment               # Whether to break before or after binary operators. Tip for "if" conditions: https://stackoverflow.com/a/50843001
BreakBeforeTernaryOperators: true                       # Whether to break before or after ternary operators (e.g., "bool a = (b > 1) ? true : false;")
BreakStringLiterals: false                              # Whether to break string literals when formatting

BreakInheritanceList: BeforeColon                       # Inheritance list breaking style (e.g., "class Foo : Base1, Base2 {};")
BreakConstructorInitializers: BeforeColon               # Constructor initializers breaking style
PackConstructorInitializers: Never                      # [Since Clang-Format 14] The pack constructor initializers style. Set it to "Never" means always put each constructor initializer on its own line

CommentPragmas: ''                                      # A regex that describes comments with special meaning, which should not be split into lines (but does not prevent indenting them)
CompactNamespaces: false                                # Whether to compact consecutive namespace declarations on the same line

# ConstructorInitializerAllOnOneLineOrOnePerLine: true  # Whether to break items in constructor initializer in multiple lines (e.g. "ClassA : mA(0), mB(0) {...}"). NOTE: This option is DEPRECATED since Clang-Format 14. Use PackConstructorInitializers instead.

EmptyLineAfterAccessModifier: Never                     # Whether to put an empty line after access modifiers
EmptyLineBeforeAccessModifier: Always                   # Whether to put an empty line before access modifiers

KeepEmptyLinesAtTheStartOfBlocks: false                 # Whether to keep empty line(s) at the start of blocks {}
MaxEmptyLinesToKeep: 2                                  # Maximum number of consecutive empty lines to keep. NOTE: This option applies to all lines, not just the start of blocks {}

ColumnLimit: 0                                          # Column limit for each line. Value 0 means that there is no column limit

ReflowComments: false                                   # Whether to break long comments into new lines, trying to obey the ColumnLimit. If comments are broken before, keep them as they are

BraceWrapping:                                          # Control of individual brace wrapping cases. NOTE: This option has only affect if BreakBeforeBraces = Custom
  AfterCaseLabel: false
  AfterNamespace: true
  AfterClass: true
  AfterControlStatement: Never
  AfterEnum: false
  AfterFunction: false
  AfterStruct: false
  AfterUnion: false
  AfterExternBlock: false
  BeforeCatch: false
  BeforeElse: false
  IndentBraces: false
  SplitEmptyFunction: false
  SplitEmptyRecord: false
  SplitEmptyNamespace: false

InsertNewlineAtEOF: true                                # [Since Clang-Format 16] Whether to add a newline at end of file if missing. This option has only effect when KeepEmptyLinesAtEOF = true
KeepEmptyLinesAtEOF: true                               # [Since Clang-Format 17] Whether to keep empty line(s) at end of file
SeparateDefinitionBlocks: Leave                         # [Since Clang-Format 14] Whether to add empty lines to separate definition blocks (classes, structs, enums, and functions). NOTE: This option should be set "Always", but this cause a problem that if there are two or more empty lines between block before, it'll remove to only one empty line 

BreakAfterAttributes: Leave                             # [Since Clang-Format 16] Whether to break after a group of C++11 attributes before a function declaration/definition name
BreakBeforeConceptDeclarations: false                   # Whether to break before a "concept" declaration


############### ALIGN #################
AlignAfterOpenBracket: Align                            # Whether to align arguments in function calls or braced initializer lists after an open bracket. For function arguments, this only only applies when AllowAllArgumentsOnNextLine = true. For braced initializer lists, only applies when Cpp11BracedListStyle is true
AlignConsecutiveMacros:                                 # Whether to align consecutive macro definitions (e.g., "#define a     1;")
  Enabled: true
  AcrossEmptyLines: false
  AcrossComments: true
AlignConsecutiveAssignments:                            # Whether to align consecutive assignments (e.g., "int a   = 1;")
  Enabled: false
  AcrossEmptyLines: false
  AcrossComments: false
AlignConsecutiveDeclarations:                           # Whether to align consecutive variable declarations (e.g., "int     a = 1;")
  Enabled: false
  AcrossEmptyLines: false
  AcrossComments: false
AlignConsecutiveBitFields:                              # Whether to align consecutive bit fields (e.g., "int aaaa : 1;")
  Enabled: false
  AcrossEmptyLines: false
  AcrossComments: false
AlignEscapedNewlines: Left                              # Whether to align backslashes (\) in escaped newlines (e.g., "#define A   \  int aaaa; \  int b;)
AlignOperands: DontAlign                                # Whether to horizontally align operands of binary operands and ternary expressions (e.g., int a = b + c;)
AlignArrayOfStructures: Left                            # Whether to align the struct fields into columns

AlignTrailingComments:                                  # [Since Clang-Format 16] Whether to align trailing comments (apply for both // and /* */ comments)
  Kind: Always
  OverEmptyLines: 2
AlignConsecutiveShortCaseStatements:                    # [Since Clang-Format 17] Whether to align consecutive short case labels. This option only applies if AllowShortCaseLabelsOnASingleLine = true
  Enabled: false
  AcrossEmptyLines: false
  AcrossComments: false
  AlignCaseColons: false

############### INDENT #################
UseTab: Never                                           # How to use tab characters. If it set to "Never", then spaces will be always used
IndentWidth: 4                                          # Number of columns for indentation
TabWidth: 4                                             # Number of columns for tab stops
ConstructorInitializerIndentWidth: 4                    # Indent width for constructor initializer
ContinuationIndentWidth: 4                              # Indent width for line continuations
PPIndentWidth: -1                                       # Indent width for preprocessor statements. NOTE: When set to -1 (default), IndentWidth is used also for preprocessor statements
# BracedInitializerIndentWidth: 4                       # [Since Clang-Format 17] Indent width for the contents of braced init lists. NOTE: If unset, ContinuationIndentWidth is used

AccessModifierOffset: -4                                # Extra indent or outdent of access modifiers
IndentAccessModifiers: false                            # Whether to indent access modifiers

Cpp11BracedListStyle: true                              # Format braced lists as C++11 style (no space between opening/closing bracket with first/last item, etc.)

IndentCaseLabels: true                                  # Whether to indent case labels one level from the "switch" statement
IndentCaseBlocks: false                                 # Whether to intent case label blocks (in {}) one level from the case label
IndentExternBlock: NoIndent                             # Whether to indent extern blocks from the "extern" statement
IndentGotoLabels: true                                  # Whether to indent "goto" labels
IndentPPDirectives: None                                # Whether to indent preprocessor directives (e.g., #ifndef #define #else #define #endif)
IndentWrappedFunctionNames: true                        # Whether to indent if a function definition/declaration is wrapped after the return type (e.g., "void \nfunc(int a, char b);"). Note: This option requires AlwaysBreakAfterReturnType != None 
IndentRequires: true                                    # Whether to indent the "requires" clause in a template. NOTE: In Clang-Format 15, this option is named "IndentRequiresClause"

NamespaceIndentation: None                              # The indentation style of namespaces
LambdaBodyIndentation: Signature                        # The indentation style of lambda bodies

RequiresExpressionIndentation: OuterScope               # [Since Clang-Format 16] Whether to indent "requires" expression bodies


############### SPACE ##################
ReferenceAlignment: Left                                # Reference alignment style (e.g., "int& a", "int &a")
PointerAlignment: Left                                  # Reference alignment style (e.g., "int* a", "int *a")
# DerivePointerAlignment: false                         # Whether to analyze the formatted file for alignment of & and *. PointerAlignment is then used only as fallback. NOTE: I don't understand this option

SpacesBeforeTrailingComments: 4                         # Number of spaces before trailing line comments (e.g., "a = 1;   // this is a" ==> "a = 1; // this is a"). This does not affect trailing block comments (/* ... */). NOTE: This option does not apply if AlignTrailingComments = Leave
SpaceAfterCStyleCast: false                             # Whether to add a space after C style casts (e.g., "(int) i", "(int)i")
SpaceAfterLogicalNot: false                             # Whether to add a space after logical not operator (e.g., "! someExpression")
SpaceAfterTemplateKeyword: false                        # Whether to add a space after "template" keyword. (e.g., "template <int> void foo()")
SpaceBeforeAssignmentOperators: true                    # Whether to add a space before assignment operators (e.g. "int a = 5;", "int a= 5"). If there are more than one spaces added before, remove others to keep only one space (e.g., "a   = 1;" ==> "a = 1;")
SpaceBeforeCaseColon: false                             # Whether to add a space before case colon (e.g., "case 1: break;", "case 1 : break")
SpaceBeforeCpp11BracedList: false                       # Whether to add a space before a C++11 braced list used to initialize an object (after the preceding identifier or type)
SpaceBeforeCtorInitializerColon: true                   # Whether to add a space before constructor initializer colon
SpaceBeforeInheritanceColon: true                       # Whether to add a space before inheritance colon
SpaceBeforeRangeBasedForLoopColon: true                 # Whether to add a space before range-based for loop colon
SpaceBeforeSquareBrackets: false                        # Whether to add a space before opening brace bracket [. Lambdas will not be affected. Only the first [ will get a space added
SpaceAroundPointerQualifiers: Default                   # Defines in which cases to put a space before or after pointer qualifiers. NOTE: If value is "Default", then ignore this option and use PointerAlignment instead
SpaceInEmptyBlock: false                                # Whether to add spaces into the empty block {}
SpacesInAngles: Never                                   # Whether to add spaces to template argument lists (e.g., "static_cast<int>(arg)", "static_cast< int >(arg)")
SpacesInSquareBrackets: false                           # Whether to add spaces after [ and before ]
SpacesInLineCommentPrefix:                              # How many spaces are allowed at the start of a line comment. NOTE: This option has only effect if ReflowComments =falsee
 Minimum: 1                                             # Minimum number of spaces at the start of the comment
 Maximum: -1                                            # Maximum number of spaces at the start of the comment. To disable, set it to -1

SpacesInParens: Never                                   # [Since Clang-Format 17] Defines in which cases spaces will be added after ( and before )
SpacesInParensOptions:                                  # [Since Clang-Format 17] Control of individual spaces in parentheses. This option only applies if SpacesInParens = Custom
  InConditionalStatements: false
  InEmptyParentheses: false
  InCStyleCasts: false
  Other: false

# SpacesInParentheses: false                            # Whether to add a space after ( and before ). NOTE: This option is DEPRECATED since Clang-Format 17 and replaced by SpacesInParensOptions
# SpacesInConditionalStatement: false                   # Whether to add spaces around parentheses of if/for/switch/while conditions. NOTE: This option is DEPRECATED since Clang-Format 17 and replaced by SpacesInParensOptions
# SpacesInCStyleCastParentheses: false                  # Whether to add spaces around parentheses of C style casts. NOTE: This option is DEPRECATED since Clang-Format 17 and replaced by SpacesInParensOptions
# SpaceInEmptyParentheses: false                        # Whether to add spaces around empty parentheses (). This option is DEPRECATED since Clang-Format 17 and replaced by SpacesInParensOptions

BitFieldColonSpacing: Both                              # Spacing style for bitfields (e.g., "unsigned bf : 2;")

SpaceBeforeParens: Custom                               # In which cases to put a space before opening parentheses (
SpaceBeforeParensOptions:                               # [Since Clang-Format 14] Control of individual space before parentheses. This option only applies if SpaceBeforeParens = Custom
  AfterControlStatements: true
  AfterForeachMacros: true
  AfterFunctionDeclarationName: false
  AfterFunctionDefinitionName: false
  AfterIfMacros: true
  AfterOverloadedOperator: false
  AfterRequiresInClause: false
  AfterRequiresInExpression: false
  BeforeNonEmptyParentheses: false

InsertBraces: false                                     # [Since Clang-Format 15] Whether to insert braces after control statements (if, else, for, do, and while). If braces are alreay used, keep them as they are. WARNING: This option could cause wrong logic code, so should not use.


############### COMMENT #################
FixNamespaceComments: true                              # Whether to add a comment at the end of namespace
ShortNamespaceLines: 1                                  # Maximal number of unwrapped lines that a short namespace spans. Defaults to 1. NOTE: This option is used with FixNamespaceComments = true


############### SORTING #################
SortIncludes: Never                                     # Whether to sort "#include"
SortUsingDeclarations: false                            # Whether to sort "using" declarations
# IncludeBlocks: Preserve                               # Dependent on the value, multiple #include blocks can be sorted as one and divided based on category


############### Penalty (DON"T UNDERSTAND WHAT DOES "PENALTY" MEANS) #################
# PenaltyBreakAssignment: 2
# PenaltyBreakBeforeFirstCallParameter: 19
# PenaltyBreakComment: 300
# PenaltyBreakFirstLessLess: 120
# PenaltyBreakString: 1000
# PenaltyBreakTemplateDeclaration: 10
# PenaltyExcessCharacter: 1000000
# PenaltyReturnTypeOnItsOwnLine: 60


############### CODE MODIFYING #################
# RemoveParentheses: Leave                              # [Since Clang-Format 17] Remove redundant parentheses (e.g., "(a - ((c + d)));" ==> "(a - (c + d));"). WARNING: This option could cause wrong logic code, so should not use
# RemoveSemicolon: false                                # [Since Clang-Format 16] Remove semicolons after the closing brace of a non-empty function (e.g., "int max(int a) {...};" ==> "int max(int a) {...}"). WARNING: This option could cause wrong logic code.
# RemoveBracesLLVM: false                               # [Since Clang-Format 14] Remove optional braces of control statements (if, else, for, and while). WARNING: This option could cause wrong logic code, so should not use
# QualifierAlignment: Leave                             # [Since Clang-Format 14] Whether to arrange specifiers and qualifiers (e.g., "int const a;", "const int *a;"). WARNING: This option could cause wrong logic code, so should not use
# IntegerLiteralSeparator:                              # [Since Clang-Format 16] Format integer literal separators (e.g., "b1 = 0b101101;", "b1 = 0b1'101'101;")
#   Binary: 0
#   Decimal: 3
#   Hex: -1
# QualifierOrder: []                                    # [Since Clang-Format 14] The order in which the qualifiers appear. Order is an array that can contain any of the following: const, inline, static, friend, constexpr, volatile, restrict, type
# RequiresClausePosition: OwnLine                       # [Since Clang-Format 15] The position of the "requires" clause


############### MACROS #################
ForEachMacros: ['foreach', 'FOREACH', 'Q_FOREACH', 'BOOST_FOREACH']   # A list of macros that should be interpreted as foreach loops instead of as function calls
IfMacros: ['IF']                                                      # A list of macros that should be interpreted as conditionals instead of as function calls
NamespaceMacros: ['NAMESPACE']                                        # A list of macros which are used to open namespace blocks
StatementMacros: []                                                   # A list of macros that should be interpreted as complete statements
TypenameMacros: []                                                    # A list of macros that should be interpreted as type declarations instead of as function calls
StatementAttributeLikeMacros: []                                      # A list of macros which are ignored in front of a statement, as if they were an attribute
WhitespaceSensitiveMacros: []                                         # A list of macros which are whitespace-sensitive and should not be touched
TypeNames: []                                                         # [Since Clang-Format 17] A list of non-keyword identifiers that should be interpreted as type names
Macros: []                                                            # [Since Clang-Format 17] A list of macros of the form <definition>=<expansion>


############### REGEX #################f
# IncludeCategories:                                    # A regex denoting the different #include categories used for ordering #includes
IncludeIsMainRegex: ''                                  # A regex of suffixes that are allowed in the file-to-main-include mapping
IncludeIsMainSourceRegex: ''                            # A regex for files being formatted that are allowed to be considered "main" in the file-to-main-include mapping
MacroBlockBegin: ''                                     # A regex matching macros that start a block
MacroBlockEnd: ''                                       # A regex matching macros that end a block